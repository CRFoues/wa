# 版权 @2022 凹语言 作者。保留所有权利。

fn main {
  println("您好，凹语言！\nHello, wa-lang!")
  println("幸运整数：", test_calc1(6, 9, 8), ", ", 5, ", ", test_calc5(6, 9, 8))
  println("幸运浮点数：", 5.44, ", ", test_calc3(6, 9, 8))

  test_print(-100, 100, -100, 100, 5)

  test_cmp0(20, 19)
  test_cmp0(20, 20)
  test_cmp1(-3, -3)
  test_cmp1(-3, -4)
  test_cmp2(10, 10)
  test_cmp2(10, 10.0001)

  test_jmp(4)
  test_loop0(10)
  test_loop1(10, 10)

  test_array(2, 4)
  test_array(7, 9)

  test_struct0(10)
  test_struct0(11)
  test_struct0(2)
  test_struct0(13)
  test_struct0(0)

  test_struct1(10, 0, 0)
  test_struct1(11, 1, 0)
  test_struct1(2, 0, 1)
  test_struct1(13, 1, 0)
  test_struct1(2, 1, 0)

  test_convert0()
  test_convert1()
  test_convert2()
  test_convert3()

  test_global_consts()
  test_global_variables_0()
  test_global_variables_1()

  test_pointer(1)
  test_pointer(-1)

  test_f32()

  test_struct2()
  test_struct3()
  test_struct4()

  test_array2()
  test_array3()
  test_array4()

  bye()
}

fn bye() {
  println("再见！\nbye!")
}

fn test_calc0(a i32, b i32, c i32) i32 {
  return (-a) * 5 / (b - c + 2)
}

fn test_calc1(a i32, b i32, c i32) i32 {
  return test_calc0(a, b, c)
}

fn test_calc2(a f64, b f64, c f64) f64 {
  return (-a) * 5 / (b - c + 2)
}

fn test_calc3(a f64, b f64, c f64) f64 {
  return test_calc2(a, b, c)
}

fn test_calc4(a u16, b u16, c u16) u16 {
  return (-a) * 5 / (b - c + 2)
}

fn test_calc5(a u16, b u16, c u16) u16 {
  return test_calc4(-a, b, c)
}

fn test_cmp0(a u16, b u16) {
  if a > b {
    println(a, " >  ", b)
  } else {
    println(a, " <= ", b)
  }
}

fn test_cmp1(a i64, b i64) {
  if a <= b {
    println(a, " <= ", b)
  } else {
    println(a, " >  ", b)
  }
}

fn test_cmp2(a f64, b f64) {
  if a != b {
    println(a, " != ", b)
  } else {
    println(a, " == ", b)
  }
}

fn test_jmp(a i32) {
  for {
    if a > 10 {
      return
    }
    println(a)
    a++
  }
}

fn test_loop0(a i16) {
  for i := i16(0); i < a; i++ {
    println(i, " * ", i, " = ", i * i)
  }
}

fn test_loop1(a u64, b u64) {
  for i := u64(0); i < a; i++ {
    for j := u64(0); j < b; j++ {
      println(i, " * ", j, " = ", i * j)
    }
  }
}

fn test_array(a int, b int) {
  var arr [10][10]int
  for i := 0; i < 10; i++ {
    for j := 0; j < 10; j++ {
      arr[i][j] = i * j
    }
  }

  println("arr[", a, "][", b, "] = ", arr[a][b])
  println("arr[", b, "][", a, "] = ", arr[b][a])
}

type t0 struct {
  a int64
  b int32
  c [4]f64
  d uint32
}

fn test_struct0(a int) {
  s0 := t0{17, -668, [4]f64{2.71828, 0.717, 3.14159}, 234}
  switch a {
  case 10:
    println(s0.a)
  case 11:
    println(s0.b)
  case 13:
    println(s0.d)
  default:
    println(s0.c[a])
  }
}

fn test_struct1(a int, b int, c int) {
  s0 := [2]t0{{11, -12, [4]f64{0.1, -0.2}, 13}, {21, -22, [4]f64{1.1, -1.2}, 24}}
  switch a {
  case 10:
    println(s0[b].a)
  case 11:
    println(s0[b].b)
  case 13:
    println(s0[b].d)
  default:
    println(s0[b].c[c])
  }
}

type struct_t0 struct {
  arr0 [16]int
  arr1 [16]f32
}
var st0 struct_t0
var st1 struct_t0

fn test_struct2() {
  for i := 0; i < 16; i++ {
    st0.arr0[i] = i * i
    st0.arr1[i] = float32(i) * 2.0
  }
}

fn getst0int(st0 struct_t0, i int) int {
  return st0.arr0[i]
}

fn getst0f32(st0 *struct_t0, i int) f32 {
  return st0.arr1[i]
}

fn test_struct3() {
  for i := 6; i < 14; i += 2 {
    println(getst0int(st0, i), ", ", getst0f32(&st0, i + 1))
  }
}

fn maket0a(i int) struct_t0 {
  var r struct_t0
  for j := 0; j < 16; j++ {
    r.arr0[j] = 100 - j - i
    r.arr1[j] = 200.0 - f32(j + i)
  }
  return r
}

fn maket0b(i int) *struct_t0 {
  for j := 0; j < 16; j++ {
    st1.arr0[j] = 100 - j - i
    st1.arr1[j] = 200.0 - f32(j + i)
  }
  return &st1
}

fn test_struct4() {
  r0, r1 := maket0a(20), maket0b(30)
  for i := 0; i < 16; i++ {
    println(r0.arr0[i], ", ", r0.arr1[i], " : ", r1.arr0[i], ", ", r1.arr1[i])
  }
}

type fff32 f32
var arr0 [32]fff32
var arr1 [32]fff32

fn test_array2() {
  for i := 0; i < 32; i++ {
    arr0[i] = fff32(i * i)
  }
}

fn getarr0a(arr [32]fff32, i int) fff32 {
  return arr[i]
}

fn getarr0b(arr *[32]fff32, i int) fff32 {
  return arr[i]
}

fn makearr0a(i int) [32]fff32 {
  var r [32]fff32
  for j := 0; j < 32; j++ {
    r[j] = fff32(i * j)
  }
  return r
}

fn makearr0b(i int) *[32]fff32 {
  for j := 0; j < 32; j++ {
    arr1[j] = 2000 - fff32(i * j)
  }
  return &arr1
}

fn test_array3() {
  for i := 6; i < 20; i += 2 {
    println(getarr0a(arr0, i), ", ", getarr0b(&arr0, i + 1))
  }
}

fn test_array4() {
  r0, r1 := makearr0a(10), makearr0b(20)
  for i := 6; i < 20; i += 2 {
    println(r0[i], ", ", r1[i])
  }
}

fn convert_i32_to_i16(a i32) i16 {
  return i16(a)
}

fn convert_i32_to_u16(a i32) u16 {
  return u16(a)
}

fn convert_i16_to_i32(a i16) i32 {
  return i32(a)
}

fn convert_u16_to_i32(a u16) i32 {
  return i32(a)
}

fn test_convert0() {
  println(i32(convert_i32_to_i16(65537)))
  println(u32(convert_i32_to_u16(65537)))
  println(convert_i16_to_i32(100))
  println(convert_i16_to_i32(-100))
  println(convert_u16_to_i32(100))
  println(convert_u16_to_i32(65530))
}

fn convert_f64_to_f32(a f64) f32 {
  return f32(a)
}

fn test_convert1() {
  println(f64(convert_f64_to_f32(3.1415926535)))
}

fn convert_i16_to_f64(a i16) f64 {
  return f64(a)
}

fn convert_u16_to_f64(a u16) f64 {
  return f64(a)
}

fn test_convert2() {
  println(convert_i16_to_f64(100))
  println(convert_i16_to_f64(-100))
  println(convert_u16_to_f64(100))
  println(convert_u16_to_f64(65530))
}

fn convert_f64_to_i32(a f64) i32 {
  return i32(a)
}

fn convert_f64_to_u32(a f64) u32 {
  return u32(a)
}

fn test_convert3() {
  println(convert_f64_to_i32(100.001))
  println(convert_f64_to_u32(100.001))
  println(convert_f64_to_i32(99.99))
  println(convert_f64_to_u32(99.99))
  println(convert_f64_to_i32(-100.001))
  println(convert_f64_to_u32(-100.001))
}

fn test_print(a i16, b u16, c i8, d u8, e f32) {
  println(a, ", ", b, ", ", c, ", ", d, ", ", e/2)
}

const gbegin = 10
const gend = 20

fn test_global_consts() {
  for i := gbegin; i < gend; i++ {
    println(i, " - ", gbegin, " = ", i - gbegin)
  }
}

type ty0 struct {
  v0 int
  v1 float64
}
var gv0 ty0 = ty0{5555, 3.1415926}
var gv1 [4]int = [4]int{81, 82, 17, 76}

fn test_global_variables_0() {
  println("gv0: {", gv0.v0, ", ", gv0.v1, "}")
  println("gv1: {", gv1[0], ", ", gv1[1], ", ", gv1[2], ", ", gv1[3], "}")
}

fn test_global_variables_1() {
  gv0.v0 = 8888
  gv0.v1 = 2.71828
  gv1[0] += 2
  gv1[1] += 3
  gv1[2] += 4
  gv1[3] += 5
  println("gv0: {", gv0.v0, ", ", gv0.v1, "}")
  println("gv1: {", gv1[0], ", ", gv1[1], ", ", gv1[2], ", ", gv1[3], "}")
}

var gint0 int = 100
var gint1 int = 200

fn get_int_addr(a int) *int {
  if a > 0 {
    return &gint0
  } else {
    return &gint1
  }
}

fn set_int(a *int) {
  *a += 10
}

fn test_pointer(a int) {
  println(gint0, ", ", gint1)
  p := get_int_addr(a)
  set_int(p)
  println(gint0, ", ", gint1)
}

fn getPi() f32 {
  return 3.1415926535
}

fn getE() f32 {
  return 2.71828
}

fn minusf32(a f32) f32 {
  return 0 - a
}

fn circle_area(r f32) f32 {
  return r * r * 3.1415926
}

fn test_f32() {
  println(getPi())
  println(getE())
  println(minusf32(getPi()))
  println(minusf32(-1.3))
  println(circle_area(1.1))
  println(circle_area(getE()))
}

# 版权 @2022 凹语言 作者。保留所有权利。

fn main {
  println("您好，凹语言！\nHello, wa-lang!")
  println("幸运整数：", test_calc1(6, 9, 8), ", ", 5, ", ", test_calc5(6, 9, 8))
  println("幸运浮点数：", 5.44, ", ", test_calc3(6, 9, 8))

  test_print(-100, 100, -100, 100, 5)

  test_cmp0(20, 19)
  test_cmp0(20, 20)
  test_cmp1(-3, -3)
  test_cmp1(-3, -4)
  test_cmp2(10, 10)
  test_cmp2(10, 10.0001)

  test_jmp(4)
  test_loop0(10)
  test_loop1(10, 10)

  test_array(2, 4)
  test_array(7, 9)

  test_struct0(10)
  test_struct0(11)
  test_struct0(2)
  test_struct0(13)
  test_struct0(0)

  test_struct1(10, 0, 0)
  test_struct1(11, 1, 0)
  test_struct1(2, 0, 1)
  test_struct1(13, 1, 0)
  test_struct1(2, 1, 0)

  test_pointer()

  test_convert0()
  test_convert1()
  test_convert2()
  test_convert3()

  bye()
}

fn bye() {
  println("再见！\nbye!")
}

fn test_calc0(a i32, b i32, c i32) i32 {
  return (-a) * 5 / (b - c + 2)
}

fn test_calc1(a i32, b i32, c i32) i32 {
  return test_calc0(a, b, c)
}

fn test_calc2(a f64, b f64, c f64) f64 {
  return (-a) * 5 / (b - c + 2)
}

fn test_calc3(a f64, b f64, c f64) f64 {
  return test_calc2(a, b, c)
}

fn test_calc4(a u16, b u16, c u16) u16 {
  return (-a) * 5 / (b - c + 2)
}

fn test_calc5(a u16, b u16, c u16) u16 {
  return test_calc4(-a, b, c)
}

fn test_cmp0(a u16, b u16) {
  if a > b {
    println(a, " >  ", b)
  } else {
    println(a, " <= ", b)
  }
}

fn test_cmp1(a i64, b i64) {
  if a <= b {
    println(a, " <= ", b)
  } else {
    println(a, " >  ", b)
  }
}

fn test_cmp2(a f64, b f64) {
  if a != b {
    println(a, " != ", b)
  } else {
    println(a, " == ", b)
  }
}

fn test_jmp(a i32) {
  for {
    if a > 10 {
      return
    }
    println(a)
    a++
  }
}

fn test_loop0(a i16) {
  for i := i16(0); i < a; i++ {
    println(i, " * ", i, " = ", i * i)
  }
}

fn test_loop1(a u64, b u64) {
  for i := u64(0); i < a; i++ {
    for j := u64(0); j < b; j++ {
      println(i, " * ", j, " = ", i * j)
    }
  }
}

fn test_array(a int, b int) {
  var arr [10][10]int
  for i := 0; i < 10; i++ {
    for j := 0; j < 10; j++ {
      arr[i][j] = i * j
    }
  }

  println("arr[", a, "][", b, "] = ", arr[a][b])
  println("arr[", b, "][", a, "] = ", arr[b][a])
}

type t0 struct {
  a int64
  b int32
  c [4]f64
  d uint32
}

fn test_struct0(a int) {
  s0 := t0{17, -668, [4]f64{2.71828, 0.717, 3.14159}, 234}
  switch a {
  case 10:
    println(s0.a)
  case 11:
    println(s0.b)
  case 13:
    println(s0.d)
  default:
    println(s0.c[a])
  }
}

fn test_struct1(a int, b int, c int) {
  s0 := [2]t0{{11, -12, [4]f64{0.1, -0.2}, 13}, {21, -22, [4]f64{1.1, -1.2}, 24}}
  switch a {
  case 10:
    println(s0[b].a)
  case 11:
    println(s0[b].b)
  case 13:
    println(s0[b].d)
  default:
    println(s0[b].c[c])
  }
}

fn test_pointer() {
  p := new_int()
  println(*p)
  set_int(p)
  println(*p)
}

fn new_int() *i32 {
  var i i32
  i = 42
  return &i
}

fn set_int(p *i32) {
  *p = 13
}

fn convert_i32_to_i16(a i32) i16 {
  return i16(a)
}

fn convert_i32_to_u16(a i32) u16 {
  return u16(a)
}

fn convert_i16_to_i32(a i16) i32 {
  return i32(a)
}

fn convert_u16_to_i32(a u16) i32 {
  return i32(a)
}

fn test_convert0() {
  println(i32(convert_i32_to_i16(65537)))
  println(u32(convert_i32_to_u16(65537)))
  println(convert_i16_to_i32(100))
  println(convert_i16_to_i32(-100))
  println(convert_u16_to_i32(100))
  println(convert_u16_to_i32(65530))
}

fn convert_f64_to_f32(a f64) f32 {
  return f32(a)
}

fn test_convert1() {
  println(f64(convert_f64_to_f32(3.1415926535)))
}

fn convert_i16_to_f64(a i16) f64 {
  return f64(a)
}

fn convert_u16_to_f64(a u16) f64 {
  return f64(a)
}

fn test_convert2() {
  println(convert_i16_to_f64(100))
  println(convert_i16_to_f64(-100))
  println(convert_u16_to_f64(100))
  println(convert_u16_to_f64(65530))
}

fn convert_f64_to_i32(a f64) i32 {
  return i32(a)
}

fn convert_f64_to_u32(a f64) u32 {
  return u32(a)
}

fn test_convert3() {
  println(convert_f64_to_i32(100.001))
  println(convert_f64_to_u32(100.001))
  println(convert_f64_to_i32(99.99))
  println(convert_f64_to_u32(99.99))
  println(convert_f64_to_i32(-100.001))
  println(convert_f64_to_u32(-100.001))
}

fn test_print(a i16, b u16, c i8, d u8, e f32) {
  println(a, ", ", b, ", ", c, ", ", d, ", ", e/2)
}

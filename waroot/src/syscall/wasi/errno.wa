type Errno struct {
	Code: i32
}

func Errno.Error => string {
	if 0 <= int(this.Code) && int(this.Code) < len(errorstr) {
		s := errorstr[this.Code]
		if s != "" {
			return s
		}
	}
	return "errno " + _Itoa(int(this.Code))
}

// TODO: Auto-generate some day. (Hard-coded in binaries so not likely to change.)
const (
	E2BIG           = 1
	EACCES          = 2
	EADDRINUSE      = 3
	EADDRNOTAVAIL   = 4
	EAFNOSUPPORT    = 5
	EAGAIN          = 6
	EALREADY        = 7
	EBADF           = 8
	EBADMSG         = 9
	EBUSY           = 10
	ECANCELED       = 11
	ECHILD          = 12
	ECONNABORTED    = 13
	ECONNREFUSED    = 14
	ECONNRESET      = 15
	EDEADLK         = 16
	EDESTADDRREQ    = 17
	EDOM            = 18
	EDQUOT          = 19
	EEXIST          = 20
	EFAULT          = 21
	EFBIG           = 22
	EHOSTUNREACH    = 23
	EIDRM           = 24
	EILSEQ          = 25
	EINPROGRESS     = 26
	EINTR           = 27
	EINVAL          = 28
	EIO             = 29
	EISCONN         = 30
	EISDIR          = 31
	ELOOP           = 32
	EMFILE          = 33
	EMLINK          = 34
	EMSGSIZE        = 35
	EMULTIHOP       = 36
	ENAMETOOLONG    = 37
	ENETDOWN        = 38
	ENETRESET       = 39
	ENETUNREACH     = 40
	ENFILE          = 41
	ENOBUFS         = 42
	ENODEV          = 43
	ENOENT          = 44
	ENOEXEC         = 45
	ENOLCK          = 46
	ENOLINK         = 47
	ENOMEM          = 48
	ENOMSG          = 49
	ENOPROTOOPT     = 50
	ENOSPC          = 51
	ENOSYS          = 52
	ENOTCONN        = 53
	ENOTDIR         = 54
	ENOTEMPTY       = 55
	ENOTRECOVERABLE = 56
	ENOTSOCK        = 57
	ENOTSUP         = 58
	ENOTTY          = 59
	ENXIO           = 60
	EOVERFLOW       = 61
	EOWNERDEAD      = 62
	EPERM           = 63
	EPIPE           = 64
	EPROTO          = 65
	EPROTONOSUPPORT = 66
	EPROTOTYPE      = 67
	ERANGE          = 68
	EROFS           = 69
	ESPIPE          = 70
	ESRCH           = 71
	ESTALE          = 72
	ETIMEDOUT       = 73
	ETXTBSY         = 74
	EXDEV           = 75
	ENOTCAPABLE     = 76
)

// TODO: Auto-generate some day. (Hard-coded in binaries so not likely to change.)
global errorstr = [...]string{
	E2BIG:           "Argument list too long",
	EACCES:          "Permission denied",
	EADDRINUSE:      "Address already in use",
	EADDRNOTAVAIL:   "Address not available",
	EAFNOSUPPORT:    "Address family not supported by protocol family",
	EAGAIN:          "Try again",
	EALREADY:        "Socket already connected",
	EBADF:           "Bad file number",
	EBADMSG:         "Trying to read unreadable message",
	EBUSY:           "Device or resource busy",
	ECANCELED:       "Operation canceled.",
	ECHILD:          "No child processes",
	ECONNABORTED:    "Connection aborted",
	ECONNREFUSED:    "Connection refused",
	ECONNRESET:      "Connection reset by peer",
	EDEADLK:         "Deadlock condition",
	EDESTADDRREQ:    "Destination address required",
	EDOM:            "Math arg out of domain of func",
	EDQUOT:          "Quota exceeded",
	EEXIST:          "File exists",
	EFAULT:          "Bad address",
	EFBIG:           "File too large",
	EHOSTUNREACH:    "Host is unreachable",
	EIDRM:           "Identifier removed",
	EILSEQ:          "EILSEQ",
	EINPROGRESS:     "Connection already in progress",
	EINTR:           "Interrupted system call",
	EINVAL:          "Invalid argument",
	EIO:             "I/O error",
	EISCONN:         "Socket is already connected",
	EISDIR:          "Is a directory",
	ELOOP:           "Too many symbolic links",
	EMFILE:          "Too many open files",
	EMLINK:          "Too many links",
	EMSGSIZE:        "Message too long",
	EMULTIHOP:       "Multihop attempted",
	ENAMETOOLONG:    "File name too long",
	ENETDOWN:        "Network interface is not configured",
	ENETRESET:       "Network dropped connection on reset",
	ENETUNREACH:     "Network is unreachable",
	ENFILE:          "File table overflow",
	ENOBUFS:         "No buffer space available",
	ENODEV:          "No such device",
	ENOENT:          "No such file or directory",
	ENOEXEC:         "Exec format error",
	ENOLCK:          "No record locks available",
	ENOLINK:         "The link has been severed",
	ENOMEM:          "Out of memory",
	ENOMSG:          "No message of desired type",
	ENOPROTOOPT:     "Protocol not available",
	ENOSPC:          "No space left on device",
	ENOSYS:          "Not implemented on WASI", // runtime.GOOS,
	ENOTCONN:        "Socket is not connected",
	ENOTDIR:         "Not a directory",
	ENOTEMPTY:       "Directory not empty",
	ENOTRECOVERABLE: "State not recoverable",
	ENOTSOCK:        "Socket operation on non-socket",
	ENOTSUP:         "Not supported",
	ENOTTY:          "Not a typewriter",
	ENXIO:           "No such device or address",
	EOVERFLOW:       "Value too large for defined data type",
	EOWNERDEAD:      "Owner died",
	EPERM:           "Operation not permitted",
	EPIPE:           "Broken pipe",
	EPROTO:          "Protocol error",
	EPROTONOSUPPORT: "Unknown protocol",
	EPROTOTYPE:      "Protocol wrong type for socket",
	ERANGE:          "Math result not representable",
	EROFS:           "Read-only file system",
	ESPIPE:          "Illegal seek",
	ESRCH:           "No such process",
	ESTALE:          "Stale file handle",
	ETIMEDOUT:       "Connection timed out",
	ETXTBSY:         "Text file busy",
	EXDEV:           "Cross-device link",
	ENOTCAPABLE:     "Capabilities insufficient",
}

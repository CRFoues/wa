// 版权 @2022 凹语言 作者。保留所有权利。

import "syscall/wasi"

var WAOS = "wasi" 

#wa:linkname $runtime.argsSizesGet
func argsSizesGet(result_argc: i32, result_argv_len: i32) => (errno: i32) {
	return wasi.ArgsSizesGet(result_argc, result_argv_len)
}

#wa:linkname $runtime.argsGet
func argsGet(result_argv: i32, result_argv_buf: i32) => (errno: i32) {
	return wasi.ArgsGet(result_argv, result_argv_buf)
}

#wa:linkname $runtime.environGet
func environGet(result_environv: i32, result_environv_buf: i32) => (errno: i32) {
	return wasi.EnvironGet(result_environv, result_environv_buf)
}

#wa:linkname $runtime.environSizesGet
func environSizesGet(result_environc: i32, result_environv_len: i32) => (errno: i32) {
	return wasi.EnvironSizesGet(result_environc, result_environv_len)
}

#wa:linkname $runtime.fdWrite
func fdWrite(fd: i32, io: i32, iovs_len: i32, nwritten: i32) => (errno: i32) {
	return wasi.FdWrite(fd, io, iovs_len, nwritten)
}

#wa:linkname $runtime.procExit
func procExit(code: i32) {
	wasi.ProcExit(code)
}

#wa:linkname $runtime.assert
func assert(ok: i32, pos_msg_ptr: i32, pos_msg_len: i32) {
	if ok == 0 {
		print("assert failed (")
		puts(pos_msg_ptr, pos_msg_len)
		putchar(')')
		putchar('\n')
		procExit(1)
	}
}

#wa:linkname $runtime.assertWithMessage
func assertWithMessage(ok: i32, msg_ptr: i32, msg_len: i32, pos_msg_ptr: i32, pos_msg_len: i32) {
	if ok == 0 {
		print("assert failed: ")
		puts(msg_ptr, msg_len)
		print(" (")
		puts(pos_msg_ptr, pos_msg_len)
		putchar(')')
		putchar('\n')
		procExit(1)
	}
}

#wa:linkname puts
func puts(ptr: i32, len: i32)

#wa:linkname putchar
func putchar(ch: i32)

#wa:linkname $runtime.waPrintI32
func waPrintI32(i: i32) {
	print_i32(i)
}

#wa:linkname $runtime.waPrintU32
func waPrintU32(i: u32) {
	print_u32(i)
}

#wa:linkname $runtime.waPrintI64
func waPrintI64(i: i64) {
	// todo
}

#wa:linkname $runtime.waPrintU64
func waPrintU64(i: u64) {
	// todo
}

#wa:linkname $runtime.waPrintRune
func waPrintRune(ch: i32) {
	putchar(ch)
}

#wa:linkname $runtime.waPuts
func waPuts(ptr: i32, len: i32) {
	puts(ptr, len)
}

#wa:linkname $runtime.waPrintF64
func waPrintF64(v: f64) {
	// todo
}

func print_i32(i: i32) {
	if i < 0 {
		print('-')
		i = -i
	}
	if i < 10 {
		putchar(i+'0')
		return
	}
	print_i32(i/10)
	print_i32(i%10)
}

func print_u32(i: u32) {
	if i < 10 {
		putchar(i32(i)+'0')
		return
	}
	print_u32(i/10)
	print_u32(i%10)
}

// 版权 @2022 凹语言 作者。保留所有权利。

import "syscall/wasi"

const WAOS = "wasi" 

#wa:linkname $runtime.argsSizesGet
func argsSizesGet(result_argc: i32, result_argv_len: i32) => (errno: i32) {
	return wasi.ArgsSizesGet(result_argc, result_argv_len)
}

#wa:linkname $runtime.argsGet
func argsGet(result_argv: i32, result_argv_buf: i32) => (errno: i32) {
	return wasi.ArgsGet(result_argv, result_argv_buf)
}

#wa:linkname $runtime.environGet
func environGet(result_environv: i32, result_environv_buf: i32) => (errno: i32) {
	return wasi.EnvironGet(result_environv, result_environv_buf)
}

#wa:linkname $runtime.environSizesGet
func environSizesGet(result_environc: i32, result_environv_len: i32) => (errno: i32) {
	return wasi.EnvironSizesGet(result_environc, result_environv_len)
}

#wa:linkname $runtime.fdWrite
func fdWrite(fd: i32, io: i32, iovs_len: i32, nwritten: i32) => (errno: i32) {
	return wasi.FdWrite(fd, io, iovs_len, nwritten)
}

#wa:linkname $runtime.procExit
func procExit(code: i32) {
	wasi.ProcExit(code)
}

#wa:linkname $runtime.panic_
func panic_(msg_ptr: i32, msg_len: i32, pos_msg_ptr: i32, pos_msg_len: i32) {
	waPrintString("panic: ")
	waPuts(msg_ptr, msg_len)
	waPrintString(" (")
	waPuts(pos_msg_ptr, pos_msg_len)
	waPrintRune(')')
	waPrintRune('\n')
	procExit(1)
}

#wa:linkname $runtime.assert
func assert(ok: i32, pos_msg_ptr: i32, pos_msg_len: i32) {
	if ok == 0 {
		waPrintString("assert failed (")
		waPuts(pos_msg_ptr, pos_msg_len)
		waPrintRune(')')
		waPrintRune('\n')
		procExit(1)
	}
}

#wa:linkname $runtime.assertWithMessage
func assertWithMessage(ok: i32, msg_ptr: i32, msg_len: i32, pos_msg_ptr: i32, pos_msg_len: i32) {
	if ok == 0 {
		waPrintString("assert failed: ")
		waPuts(msg_ptr, msg_len)
		waPrintString(" (")
		waPuts(pos_msg_ptr, pos_msg_len)
		waPrintRune(')')
		waPrintRune('\n')
		procExit(1)
	}
}

#wa:linkname $runtime.waPrintBool
func waPrintBool(i: bool) {
	printBool(i)
}

#wa:linkname $runtime.waPrintI32
func waPrintI32(i: i32) {
	printI64(i64(i))
}

#wa:linkname $runtime.waPrintU32Ptr
func waPrintU32Ptr(i: u32) {
	printHex(u64(i))
}

#wa:linkname $runtime.waPrintU32
func waPrintU32(i: u32) {
	printU64(u64(i))
}

#wa:linkname $runtime.waPrintI64
func waPrintI64(i: i64) {
	printI64(i)
}

#wa:linkname $runtime.waPrintU64
func waPrintU64(i: u64) {
	printU64(i)
}

#wa:linkname $runtime.waPrintF32
func waPrintF32(i: f32) {
	printF64(f64(i))
}

#wa:linkname $runtime.waPrintF64
func waPrintF64(i: f64) {
	printF64(f64(i))
}

#wa:linkname $runtime.waPrintString
func waPrintString(s: string) {
	printString(s)
}

const (
	MaxRune   = '\U0010FFFF'
	RuneError = '\uFFFD'
	surrogateMin = 0xD800
	surrogateMax = 0xDFFF
	tx = 0b10000000
	t2 = 0b11000000
	t3 = 0b11100000
	t4 = 0b11110000
	maskx = 0b00111111

	rune1Max = 1<<7 - 1
	rune2Max = 1<<11 - 1
	rune3Max = 1<<16 - 1
)
#wa:linkname $runtime.waPrintRune
func waPrintRune(r: i32) {
	p := make([]byte, 0, 4)
	n : int

	switch i := uint32(r); {
	case i <= rune1Max:
		p[0] = byte(r)
		n = 1
	case i <= rune2Max:
		_ = p[1] // eliminate bounds checks
		p[0] = t2 | byte(r>>6)
		p[1] = tx | byte(r)&maskx
		n = 2
	case i > MaxRune, surrogateMin <= i && i <= surrogateMax:
		r = RuneError
		// fallthrough
		{
			_ = p[2] // eliminate bounds checks
			p[0] = t3 | byte(r>>12)
			p[1] = tx | byte(r>>6)&maskx
			p[2] = tx | byte(r)&maskx
			n = 3
		}
	case i <= rune3Max:
		_ = p[2] // eliminate bounds checks
		p[0] = t3 | byte(r>>12)
		p[1] = tx | byte(r>>6)&maskx
		p[2] = tx | byte(r)&maskx
		n = 3
	default:
		_ = p[3] // eliminate bounds checks
		p[0] = t4 | byte(r>>18)
		p[1] = tx | byte(r>>12)&maskx
		p[2] = tx | byte(r>>6)&maskx
		p[3] = tx | byte(r)&maskx
		n = 4
	}

	printString(string(p[:n]))
}

#wa:linkname $runtime.waPuts
func waPuts(ptr: i32, len: i32)

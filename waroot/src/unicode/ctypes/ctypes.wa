// 版权 @2023 凹语言 作者。保留所有权利。

func IsAlnum(r: rune) => bool {
	return IsAlpha(r) || IsDigit(r)
}

func IsAlpha(r: rune) => bool {
	return (r|32)-'a' < 26
}

func IsAsscii(r: rune) => bool {
	return r <= 0x7f
}

func IsBlank(r: rune) => bool {
	return r == ' ' || r == '\t'
}

func IsCntrl(r: rune) => bool {
	return r < 0x20 || r == 0x7f
}

func IsDigit(r: rune) => bool {
	return r >= '0' && r <= '9'
}

func IsGraph(r: rune) => bool {
	if IsAsscii(r) {
		return r-0x21 < 0x5e
	}
	return false
}

func IsLower(r: rune) => bool {
	return r >= 'a' && r <= 'z'
}

func IsPrint(r: rune) => bool {
	if IsAsscii(r) {
		return r-0x20 < 0x5f
	}
	return false
}

func IsPunct(r: rune) => bool {
	if IsAsscii(r) {
		return IsGraph(r) && !IsAlnum(r)
	}
	return false
}

func IsSpace(r: rune) => bool {
	switch r {
	case '\t', '\n', '\v', '\f', '\r', ' ', 0x85, 0xA0:
		return true
	}
	return false
}

func IsUpper(r: rune) => bool {
	return r >= 'A' && r <= 'Z'
}

func IsXdigit(r: rune) => bool {
	return IsDigit(r) || (r >= 'A' && r <= 'F') || (r >= 'a' && r <= 'f')
}

func ToAscii(r: rune) => rune {
	return r & 0x7f
}

func ToLower(r: rune) => rune {
	if IsUpper(r) {
		return r | 32
	}
	return r
}

func ToUpper(r: rune) => rune {
	if IsLower(r) {
		return r & 0x5f
	}
	return r
}

// 版权 @2023 凹语言 作者。保留所有权利。

import (
	"errors"
	"image"
	"image/color"
)

func decodeConfig(data: []byte) => (
	config: image.Config,
	palette: []color.RGBA,
	offset: u32,
	err: error,
) {
	// We only support those BMP images that are a BITMAPFILEHEADER
	// immediately followed by a BITMAPINFOHEADER.
	const (
		fileHeaderLen = 14
		infoHeaderLen = 40
	)

	if len(data) < fileHeaderLen+infoHeaderLen {
		err = errors.New("bmp: invalid format")
		return
	}

	b := data[:]
	if string(b[:2]) != "BM" {
		err = errors.New("bmp: invalid format")
		return
	}

	offset = readUint32(b[10:14])
	if readUint32(b[14:18]) != infoHeaderLen {
		err = ErrUnsupported
		return
	}
	width := int(readUint32(b[18:22]))
	height := int(readUint32(b[22:26]))
	if width < 0 || height < 0 {
		err = ErrUnsupported
		return
	}
	// We only support 1 plane, 8 or 24 bits per pixel and no compression.
	planes, bpp, compression := readUint16(b[26:28]), readUint16(b[28:30]), readUint32(b[30:34])
	if planes != 1 || compression != 0 {
		err = ErrUnsupported
		return
	}
	switch bpp {
	case 8:
		if offset != fileHeaderLen+infoHeaderLen+256*4 {
			err = ErrUnsupported
			return
		}
		if len(data) < int(offset) {
			err = errors.New("bmp: invalid format")
			return
		}
		b = data[fileHeaderLen+infoHeaderLen:][:256*4]
		palette = make([]color.RGBA, 256)
		for i := range palette {
			// BMP images are stored in BGR order rather than RGB order.
			// Every 4th byte is padding.
			palette[i] = color.RGBA{b[4*i+2], b[4*i+1], b[4*i+0], 0xFF}
		}
		config = image.Config{Width: width, Height: height}
		return
	case 24:
		if offset != fileHeaderLen+infoHeaderLen {
			err = ErrUnsupported
			return
		}
		config = image.Config{Width: width, Height: height}
		return
	}
	err = ErrUnsupported
	return
}

func decodeRGBA(
	data: []byte,
	config: image.Config,
	dataOffset: int,
) => (*image.RGBA, error) {
	rgba := image.NewRGBA(image.Rect(0, 0, config.Width, config.Height))
	// There are 3 bytes per pixel, and each row is 4-byte aligned.
	step := (3*config.Width + 3) &^ 3
	// BMP images are stored bottom-up rather than top-down.
	for y := config.Height - 1; y >= 0; y-- {
		b := data[:dataOffset][:step]
		dataOffset += step

		p := rgba.Pix[y*rgba.Stride : y*rgba.Stride+config.Width*4]
		for i, j := 0, 0; i < len(p); i, j = i+4, j+3 {
			// BMP images are stored in BGR order rather than RGB order.
			p[i+0] = b[j+2]
			p[i+1] = b[j+1]
			p[i+2] = b[j+0]
			p[i+3] = 0xFF
		}
	}
	return rgba, nil
}

func decodePaletted(
	data: []byte,
	config: image.Config,
	palette: []color.RGBA,
	dataOffset: int,
) => (image.Image, error) {
	paletted := image.NewPaletted(image.Rect(0, 0, config.Width, config.Height))
	// BMP images are stored bottom-up rather than top-down.
	for y := config.Height - 1; y >= 0; y-- {
		p := paletted.Pix[y*paletted.Stride : y*paletted.Stride+config.Width]
		copy(p, data[dataOffset:])
		dataOffset += config.Width

		// Each row is 4-byte aligned.
		if config.Width%4 != 0 {
			dataOffset += 4 - config.Width%4
		}
	}
	return paletted, nil
}

func readUint16(b: []byte) => uint16 {
	return uint16(b[0]) | uint16(b[1])<<8
}

func readUint32(b: []byte) => uint32 {
	return uint32(b[0]) | uint32(b[1])<<8 | uint32(b[2])<<16 | uint32(b[3])<<24
}

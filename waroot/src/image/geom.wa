// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

import (
	"math/bits"
)

// 二维点
type Point struct {
	X, Y: int
}

func Pt(X, Y: int) => Point {
	return Point{X, Y}
}

// 二维矩形
type Rectangle struct {
	Min, Max: Point
}

func Rect(x, y, w, h: int) => Rectangle {
	return Rectangle{}
}

func Rectangle.Dx => int {
	return this.Max.X - this.Min.X
}

func Rectangle.Dy => int {
	return this.Max.Y - this.Min.Y
}

func Rectangle.Size => Point {
	return Point{
		this.Max.X - this.Min.X,
		this.Max.Y - this.Min.Y,
	}
}
func Rectangle.Contain(x, y: int) => bool {
	return this.Min.X <= x && x < this.Max.X &&
		this.Min.Y <= y && y < this.Max.Y
}

func pixelBufferLength(bytesPerPixel: int, r: Rectangle, imageTypeName: string) => int {
	totalLength := mul3NonNeg(bytesPerPixel, r.Dx(), r.Dy())
	if totalLength < 0 {
		panic("image: New" + imageTypeName + " Rectangle has huge or negative dimensions")
	}
	return totalLength
}

// mul3NonNeg returns (x * y * z), unless at least one argument is negative or
// if the computation overflows the int type, in which case it returns -1.
func mul3NonNeg(x: int, y: int, z: int) => int {
	if (x < 0) || (y < 0) || (z < 0) {
		return -1
	}
	hi, lo := bits.Mul64(uint64(x), uint64(y))
	if hi != 0 {
		return -1
	}
	hi, lo = bits.Mul64(lo, uint64(z))
	if hi != 0 {
		return -1
	}
	a := int(lo)
	if (a < 0) || (uint64(a) != lo) {
		return -1
	}
	return a
}

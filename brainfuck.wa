# 版权 @2019 凹语言 作者。保留所有权利。

fn main() {
	# print hi
	const code = "++++++++++[>++++++++++<-]>++++.+."
	vm := NewBrainFuckVM(code)
	runVM(vm)
}

type BrainFuckVM struct {
	mem  :[30000]byte
	code :string
	pos  :int
	pc   :int
}

fn NewBrainFuckVM(code: string) => *BrainFuckVM {
	return &BrainFuckVM{code: code}
}

fn runVM(p: *BrainFuckVM) {
	for ; p.pc != len(p.code); p.pc++ {
		switch x := p.code[p.pc]; x {
		case '>':
			p.pos++
		case '<':
			p.pos--
		case '+':
			p.mem[p.pos]++
		case '-':
			p.mem[p.pos]--
		case '[':
			if p.mem[p.pos] == 0 {
				runVM_loop(p, 1)
			}
		case ']':
			if p.mem[p.pos] != 0 {
				runVM_loop(p, -1)
			}
		case '.':
			print(rune(p.mem[p.pos]))
		case ',':
			# TODO: support read byte
		}
	}
	return
}

fn runVM_loop(p: *BrainFuckVM, inc: int) {
	for i := inc; i != 0; p.pc += inc {
		switch p.code[p.pc+inc] {
		case '[':
			i++
		case ']':
			i--
		}
	}
}
